#! /usr/bin/env python

##############################################
# Express a truth table as an NchooseK block #
# By Scott Pakin <pakin@lanl.gov>            #
##############################################

import argparse
import string
import sys
from collections import defaultdict
from itertools import product

class TruthTable(object):
    'Represent a truth table and various operations on it.'

    def __init__(self):
        'Initialize a truth table.'
        self.nrows = 0
        self.ncols = 0

    def read_from_file(self, fd):
        'Read a truth table from a file.'
        self.tbl = set()
        for line in fd.readlines():
            hash = line.find('#')
            if hash != -1:
                line = line[:hash]
            tbl_line = []
            fields = line.split()
            nf = len(fields)
            if nf == 0:
                continue
            if self.ncols == 0:
                self.ncols = nf
            elif self.ncols != nf:
                raise Exception('mismatched column counts')
            for f in fields:
                if f.lower() in ['0', '-1', 'f', 'false']:
                    tbl_line.append(0)
                elif f.lower() in ['1', '+1', 't', 'true']:
                    tbl_line.append(1)
            self.tbl.add(tuple(tbl_line))
        self.nrows = len(self.tbl)

    def _find_k_values(self, weights):
        '''Return a set of k values given a list of column weights.  Return
        None if no such k values can be found.'''
        valid_tallies = set()
        invalid_tallies = set()
        for seq in product(*[[0, 1]], repeat=self.ncols):
            row = tuple(seq)
            s = sum([row[c]*weights[c] for c in range(self.ncols)])
            if row in tt.tbl:
                if s in invalid_tallies:
                    return None
                valid_tallies.add(s)
            else:
                if s in valid_tallies:
                    return None
                invalid_tallies.add(s)
        overlap = valid_tallies.intersection(invalid_tallies)
        if len(overlap) == 0:
            return valid_tallies
        else:
            return None

    def _weights_from_sum(self, target, weights, nleft):
        'Generate weights adding up to a given sum.'
        # Handle the base case of no numbers left.
        if nleft == 0:
            if sum(weights) == target:
                yield weights
            return

        # Handle the recursive case.
        wt_sum = sum(weights)
        for wt in range(1, 2**(self.ncols - 1) + 1):
            if wt + wt_sum <= target - nleft + 1:
                for rwt in self._weights_from_sum(target, [wt] + weights, nleft - 1):
                    yield rwt
            else:
                break

    def to_nck(self, verbose=False):
        '''Return a list of column weights and a list of k values that reproduce
        the truth table.'''
        # Consider weights with increasing sums until we find a solution.  We
        # can always find a solution of weight 2^N-1 because we can assign a
        # different power of 2 to each column to produce a unique k.
        for target in range(tt.ncols, 2**tt.ncols):
            if verbose:
                sys.stderr.write('INFO: Trying N = %d\n' % target)
            for weights in self._weights_from_sum(target, [], tt.ncols):
                kvals = self._find_k_values(weights)
                if kvals != None:
                    return weights, kvals
        return None, None  # We should never get here.

###########################################################################

# Parse the command line.
parser = argparse.ArgumentParser(description='Express a truth table with NchooseK.')
parser.add_argument('infile', nargs='?', type=open, default=sys.stdin, metavar='FILE',
                    help='name of a file containing a truth table to express')
parser.add_argument('--compress', '-c', action='store_true',
                    help='display repeated variable names only once but with a repetition count')
parser.add_argument('--verbose', '-v', action='store_true',
                    help='output progress messages as the program runs')
cl_args = parser.parse_args()

# Read a truth table.
tt = TruthTable()
tt.read_from_file(cl_args.infile)

# Convert the truth table to a pretty-printed NchooseK primitive.
weights, kvals = tt.to_nck(cl_args.verbose)
if weights == None:
    sys.exit('Failed to convert the truth table')
if cl_args.compress:
    col_names = []
    for c, n in zip(string.ascii_uppercase, weights):
        if n == 1:
            col_names.append(c)
        else:
            col_names.append('%s*%d' % (c, n))
else:
    col_names = ''.join([c*n for c, n in zip(string.ascii_uppercase, weights)])
kval_names = [str(k) for k in sorted(kvals)]
print('nck([%s], {%s})' % (', '.join(col_names), ', '.join(kval_names)))
